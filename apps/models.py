from django.db import models
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm, PasswordChangeForm
from django import forms
from django.contrib.auth import get_user_model
from django.utils import timezone


class Category(models.Model):
    sub_category = models.ForeignKey(
        "self",
        on_delete=models.CASCADE,
        related_name="sub_categories",
        null=True,
        blank=True,
    )
    is_sub = models.BooleanField(default=False)
    name = models.CharField(max_length=255, null=True)
    slug = models.SlugField(max_length=255, unique=True)

    def __str__(self):
        return self.name


# Thay ƒë·ªïi form register
class CreateUserForm(UserCreationForm):
    class Meta:
        model = User
        fields = [
            "username",
            "email",
            "first_name",
            "last_name",
            "password1",
            "password2",
        ]


User = get_user_model()


class ChangeUserProfileForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput, required=False)
    password_confirmation = forms.CharField(widget=forms.PasswordInput, required=False)

    class Meta:
        model = User
        fields = ["username", "email", "password"]

    def clean_password_confirmation(self):
        password = self.cleaned_data.get("password")
        password_confirmation = self.cleaned_data.get("password_confirmation")

        if password and password != password_confirmation:
            raise forms.ValidationError("Passwords do not match.")

        return password_confirmation

    def save(self, commit=True):
        user = super().save(commit=False)
        password = self.cleaned_data.get("password")

        if password:
            user.set_password(password)

        if commit:
            user.save()

        return user


from django.db import models
from django.utils import timezone
from django.db.models import Sum


from django.db import models
from django.utils import timezone
from django.db.models import Sum


from django.db import models
from django.utils import timezone
from django.db.models import Sum


class Product(models.Model):
    UNIT_CHOICES = [
        ("piece", "H·ªôp"),
        ("box", "Th√πng"),
    ]

    category = models.ManyToManyField("Category", related_name="product")
    name = models.CharField(max_length=255, null=True)
    price = models.FloatField(default=0, null=True, blank=False)
    digital = models.BooleanField(default=False, null=True, blank=False)
    image = models.ImageField(null=True, blank=True)
    detail = models.TextField(null=True, blank=True)

    stock = models.IntegerField(default=0)  # t·ªïng s·ªë h√†ng nh·∫≠p
    sold = models.IntegerField(default=0)  # gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch

    unit = models.CharField(max_length=10, choices=UNIT_CHOICES, default="piece")

    flash_sale_price = models.FloatField(null=True, blank=True)
    flash_sale_end = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return self.name if self.name else "Unnamed Product"

    # ‚úÖ L·∫•y URL ·∫£nh ch√≠nh
    @property
    def ImageURL(self):
        try:
            return self.image.url
        except Exception:
            return ""

    # ‚úÖ Trung b√¨nh rating
    @property
    def avg_rating(self):
        return self.reviews.aggregate(models.Avg("rating"))["rating__avg"] or 5

    # ‚úÖ S·ªë l∆∞·ª£t ƒë√°nh gi√°
    @property
    def review_count(self):
        return self.reviews.count()

    # ‚úÖ Ki·ªÉm tra c√≥ ƒëang flash sale kh√¥ng
    @property
    def is_flash_sale(self):
        return self.flash_sale_end and self.flash_sale_end > timezone.now()

    # ‚úÖ T√≠nh s·ªë ƒë√£ b√°n d·ª±a tr√™n OrderItem (ch·ªâ t√≠nh ƒë∆°n complete)
    @property
    def sold_count(self):
        total = self.order_items.filter(order__complete=True).aggregate(
            total=Sum("quantity")
        )["total"]
        return total or 0

    # ‚úÖ T√≠nh s·ªë c√≤n l·∫°i
    @property
    def remaining_stock(self):
        return max(self.stock - self.sold_count, 0)

    # ‚úÖ Gi√° hi·ªÉn th·ªã (theo ƒë∆°n v·ªã)
    @property
    def display_price(self):
        if self.unit == "box":  # n·∫øu l√† Th√πng
            return self.price * 30
        return self.price


class Order(models.Model):
    STATUS_CHOICES = [
        ("confirmed", "ƒê√£ x√°c nh·∫≠n"),
        ("shipping", "ƒêang giao h√†ng"),
        ("delivered", "ƒê√£ giao h√†ng"),
        ("completed", "Ho√†n t·∫•t"),
        ("cancelled", "ƒê√£ h·ªßy"),
    ]

    customer = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    date_order = models.DateTimeField(auto_now_add=True)
    complete = models.BooleanField(default=False, null=True, blank=False)
    transaction_id = models.CharField(max_length=255, null=True, blank=True)

    # üîπ Tr·∫°ng th√°i ƒë∆°n h√†ng
    status = models.CharField(
        max_length=20, choices=STATUS_CHOICES, default="confirmed"
    )
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return (
            f"Order #{self.id} - {self.customer.username if self.customer else 'Guest'}"
        )

    # ‚úÖ T√≠nh t·ªïng s·ªë l∆∞·ª£ng item trong gi·ªè
    @property
    def get_cart_items(self):
        if not self.pk:
            return 0
        orderitems = (
            self.order_items.all()
        )  # üîπ d√πng related_name thay cho orderitem_set
        return sum(
            item.quantity if item and item.quantity else 0 for item in orderitems
        )

    # ‚úÖ T√≠nh t·ªïng ti·ªÅn gi·ªè h√†ng (c√≥ Flash Sale + ƒë∆°n v·ªã h·ªôp/th√πng)
    @property
    def get_cart_total(self):
        if not self.pk:
            return 0
        orderitems = self.order_items.all()  # üîπ ƒë·ªïi sang order_items
        return sum(item.get_total if item else 0 for item in orderitems)

    # ‚úÖ Ki·ªÉm tra ƒë∆°n h√†ng c√≤n ho·∫°t ƒë·ªông
    @property
    def is_active(self):
        return self.status not in ["completed", "cancelled"]

    # ‚úÖ Hi·ªÉn th·ªã badge m√†u cho UI
    def get_status_badge(self):
        colors = {
            "confirmed": "warning",  # v√†ng
            "shipping": "info",  # xanh d∆∞∆°ng nh·∫°t
            "delivered": "primary",  # xanh d∆∞∆°ng
            "completed": "success",  # xanh l√°
            "cancelled": "danger",  # ƒë·ªè
        }
        return colors.get(self.status, "secondary")

    # ‚úÖ ƒê·ªìng b·ªô complete v·ªõi status + tr√°nh ƒë∆°n r√°c 0ƒë
    def save(self, *args, **kwargs):
        is_new = self.pk is None
        super().save(*args, **kwargs)  # l∆∞u l·∫ßn ƒë·∫ßu ƒë·ªÉ c√≥ ID

        if not is_new:  # x·ª≠ l√Ω sau khi c√≥ ID
            if self.get_cart_total == 0:
                # ƒê∆°n r√°c: h·ªßy lu√¥n, kh√¥ng gi·ªØ pending
                self.complete = False
                self.status = "cancelled"
            elif self.status == "completed":
                # Ho√†n t·∫•t => complete = True
                self.complete = True

            # Update l·∫°i n·∫øu c√≥ thay ƒë·ªïi
            super().save(update_fields=["complete", "status"])


class OrderItem(models.Model):
    product = models.ForeignKey(
        Product,
        related_name="order_items",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
    )
    order = models.ForeignKey(
        Order,
        related_name="order_items",
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
    )
    quantity = models.IntegerField(default=0, null=True, blank=False)
    date_added = models.DateTimeField(auto_now_add=True)

    # ‚úÖ L∆∞u ƒë∆°n v·ªã ng∆∞·ªùi mua ch·ªçn (theo Product.UNIT_CHOICES: piece/h·ªôp, box/th√πng)
    unit = models.CharField(
        max_length=10,
        choices=Product.UNIT_CHOICES,
        default="piece",
    )

    # ‚úÖ T√≠nh t·ªïng ti·ªÅn t·ª´ng d√≤ng
    @property
    def get_total(self):
        if not self.product:
            return 0

        # Gi√° c∆° b·∫£n (∆∞u ti√™n flash sale n·∫øu c√≥)
        if self.product.is_flash_sale and self.product.flash_sale_price:
            base_price = self.product.flash_sale_price
        else:
            base_price = self.product.price or 0

        # N·∫øu kh√°ch ch·ªçn Th√πng (box) th√¨ gi√° = 30 h·ªôp
        if self.unit == "box":
            base_price *= 30

        return base_price * (self.quantity or 0)

    def __str__(self):
        order_id = self.order.id if self.order else "N/A"
        product_name = self.product.name if self.product else "No product"
        unit_display = dict(Product.UNIT_CHOICES).get(self.unit, self.unit)
        return f"Order #{order_id} - {product_name} ({unit_display}) x{self.quantity}"


# class InformationCustomer(models.Model):
#     customer = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
#     order = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True, blank=True)
#     address = models.CharField(max_length=255, null=True)
#     city = models.CharField(max_length=255, null=True)
#     phone = models.CharField(max_length=255, null=True)
#     state = models.CharField(max_length=255, null=True)
#     date_added = models.DateTimeField(auto_now_add=True)
#
#     def __str__(self):
#         return self.address


class Payment_VNPay(models.Model):
    order_id = models.IntegerField(default=0, null=True, blank=True)
    amount = models.FloatField(default=0.0, null=True, blank=True)
    order_desc = models.CharField(max_length=200, null=True, blank=True)
    vnp_TransactionNo = models.CharField(max_length=200, null=True, blank=True)
    vnp_ResponseCode = models.CharField(max_length=200, null=True, blank=True)

    # log th·ªùi gian
    created_at = models.DateTimeField(auto_now_add=True)  # ch·ªâ set khi t·∫°o record
    updated_at = models.DateTimeField(auto_now=True)  # update m·ªói l·∫ßn save()

    def __str__(self):
        return f"Payment {self.order_id} - {self.amount} VND"


class PaymentForm(forms.Form):
    order_type = forms.CharField(max_length=20)
    amount = forms.IntegerField()
    order_desc = forms.CharField(max_length=100)
    bank_code = forms.CharField(max_length=20, required=False)
    language = forms.CharField(max_length=2)


# ‚≠ê ƒê√°nh gi√° s·∫£n ph·∫©m
class Review(models.Model):
    order = models.ForeignKey(
        Order, on_delete=models.CASCADE, null=True, blank=True
    )  # ‚úÖ cho ph√©p null
    product = models.ForeignKey(
        Product, on_delete=models.CASCADE, related_name="reviews"
    )
    customer = models.ForeignKey(User, on_delete=models.CASCADE)
    rating = models.IntegerField(default=5)  # 1-5 sao
    comment = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Review {self.rating}‚òÖ - {self.product.name}"


class ProductReport(models.Model):
    REPORT_CHOICES = [
        ("fake", "H√†ng gi·∫£ / nh√°i"),
        ("expired", "H·∫øt h·∫°n s·ª≠ d·ª•ng"),
        ("wrong", "Sai th√¥ng tin"),
        ("other", "Kh√°c"),
    ]

    product = models.ForeignKey(
        Product, on_delete=models.CASCADE, related_name="reports"
    )
    customer = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    reason = models.CharField(max_length=50, choices=REPORT_CHOICES, default="other")
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Report {self.product.name} - {self.reason}"


# ‚≠ê ƒê·ªãa ch·ªâ ng∆∞·ªùi d√πng
from django.db import models
from django.contrib.auth.models import User


class Address(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="addresses")
    full_name = models.CharField(max_length=100)
    phone = models.CharField(max_length=20)

    # T√°ch ƒë·ªãa ch·ªâ chi ti·∫øt
    province = models.CharField("T·ªânh/Th√†nh ph·ªë", max_length=100, blank=True, null=True)
    district = models.CharField("Qu·∫≠n/Huy·ªán", max_length=100, blank=True, null=True)
    ward = models.CharField("Ph∆∞·ªùng/X√£", max_length=100, blank=True, null=True)
    detail = models.CharField("S·ªë nh√†, ƒë∆∞·ªùng...", max_length=255, blank=True, null=True)

    # Tr∆∞·ªùng t·ªïng h·ª£p
    address_line = models.CharField("ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß", max_length=255, blank=True)

    is_default = models.BooleanField(default=False)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def save(self, *args, **kwargs):
        # Build l·∫°i address_line khi l∆∞u
        parts = [self.detail, self.ward, self.district, self.province]
        self.address_line = ", ".join([p for p in parts if p])

        # N·∫øu ch·ªçn m·∫∑c ƒë·ªãnh -> b·ªè m·∫∑c ƒë·ªãnh ·ªü c√°c ƒë·ªãa ch·ªâ kh√°c
        if self.is_default:
            Address.objects.filter(user=self.user, is_default=True).exclude(
                pk=self.pk
            ).update(is_default=False)

        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.full_name} - {self.address_line or 'Ch∆∞a c√≥ ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß'}"


class Voucher(models.Model):
    code = models.CharField(max_length=20, unique=True)
    discount_percent = models.IntegerField(default=0)  # 10, 20...
    free_ship = models.BooleanField(default=False)
    expire_date = models.DateTimeField()

    def is_valid(self):
        from django.utils import timezone

        return self.expire_date >= timezone.now()
